#include <iostream>
#include <array>
#include <limits>
#include <vector>

using namespace std;

const int NmaxNodos = 30;

struct Arista{
    int info;
    bool existe;
};

struct Nodo{
    int info;
    bool existe;
    bool visitado;
    int distancia;
    int IndPadre;
    vector<Nodo*> Vecinos;
};

class GrafoMatrizAdy{
public:
    GrafoMatrizAdy(void);
    bool GrafoVacio(void){
        if(numNodos == 0){
            return true;
        }else return false;
    }
    
    int numeroNodos(void){return numNodos;}
    int numeroArcos(void){
        int nArcos = 0;
        for(int i{0}; i < numNodos; i++){
            for(int j{0}; j < numNodos; j++){
                if(MatrizAdyaciencia.at(i).at(j).existe){
                    nArcos++;
                }
            }
        }
        return nArcos;
    }
    
    bool insertarNodo(Nodo n);
    bool crearArista(Nodo N1, Nodo N2, Arista A);
    
    void imprimirMat(void);
    void imprimirNodos(void);
    
    bool explorar(Nodo inicio);
    
    bool suprimirNodo(int valor);
    bool suprimirArista(int n1, int n2);
    
    void dijkstra(Nodo inicio);
    void MostrarCaminoDijkstra(Nodo destino);
    
    int getPeso(Nodo inicio, Nodo destino);
    int getIndice(Nodo n);
    
    array<Nodo, NmaxNodos> getListaNodos(){return  ListaNodos;}
    
private:
    array<Nodo, NmaxNodos> ListaNodos;
    array<array<Nodo,NmaxNodos>, NmaxNodos> MatrizAdyaciencia;
    int numNodos;
    void resetVisitados(array<Nodo, NmaxNodos> *LN);
    void resetDistancias(array<Nodo, NmaxNodos> *LN);
};

GrafoMatrizAdy::GrafoMatrizAdy()
{
    for(unsigned long i{0}; i < NmaxNodos; i++){
        ListaNodos.at(i).info = 0;
        ListaNodos.at(i).existe = false;
        ListaNodos.at(i).visitado = false;
        ListaNodos.at(i).distancia = numeric_limits<int>::max();
        
        for(unsigned long j{0}; j < NmaxNodos; j++){
            MatrizAdyaciencia.at(i).at(j).info = 0;
            MatrizAdyaciencia.at(i).at(j).existe = false;
        }
    }
    numNodos = 0;
}

bool GrafoMatrizAdy::insertarNodo(Nodo n)
{
    int i{0};
    while((ListaNodos.at(i).existe == true) && (i < NmaxNodos)){
        i++;
    }
    if(i == NmaxNodos){
        return false;
    }else{
        ListaNodos.at(i).existe = true;
        ListaNodos.at(i).info = n.info;
        
        numNodos++;
        return true;
    }
}

bool GrafoMatrizAdy::crearArista(Nodo N1, Nodo N2, Arista A)
{
    unsigned long i{0}, j{0};
    while((i < NmaxNodos) && (ListaNodos.at(i).existe) && (ListaNodos.at(i).info != N1.info)){
        i++;
    }
    if(i == NmaxNodos){
        return false;
    }else{
        j = 0;
        while((j < NmaxNodos) && (ListaNodos.at(j).existe) && (ListaNodos.at(j).info != N2.info)){
            j++;
        }
        if(j == NmaxNodos){
            return false;
        }else{
            if(MatrizAdyaciencia.at(i).at(j).existe){
                return false;
            }else{
                MatrizAdyaciencia.at(i).at(j).existe = true;
                MatrizAdyaciencia.at(i).at(j).info = A.info;
                ListaNodos.at(i).Vecinos.push_back(&ListaNodos.at(j));
                return true;
            }
        }
    }
}

void GrafoMatrizAdy::imprimirMat()
{
    for(int i{0}; i < NmaxNodos; i++){
        for(int j{0}; j < NmaxNodos; j++){
            cout << MatrizAdyaciencia.at(i).at(j).existe;
        }
        cout << endl;
    }
}

void GrafoMatrizAdy::imprimirNodos()
{
    for(unsigned long i{0}; i < NmaxNodos; i++){
        cout << ListaNodos.at(i).info;
    }
    cout << endl;
    cout << endl;
}

bool GrafoMatrizAdy::explorar(Nodo inicio)
{
    resetVisitados(&ListaNodos);
    cout << "Voy a recorrer el grafo de aquella manera..." << endl;
    unsigned long i{0}, j{0};
    bool cambioFila{false}, fin{false};
    
    while((i < NmaxNodos) && ListaNodos.at(i).info != inicio.info){
        i++;
    }
    if(i == NmaxNodos){
        cout << "Nodo inicio no valido" << endl;
        return false;
    }else{
        cout << ListaNodos.at(i).info << " ";
        while(!fin){
            cambioFila = false;
            if(MatrizAdyaciencia.at(i).at(j).existe == 1 && ListaNodos.at(j).visitado == false && j < NmaxNodos && i < NmaxNodos){
                cout << ListaNodos.at(j).info << " ";
                ListaNodos.at(i).visitado = true;
                i = j;
                j = 0;
                cambioFila = true;
            }
            if(!cambioFila){
                j++;
            }
            if(j > NmaxNodos){
                fin = true;
            }
        }
        return true;
    }
}

bool GrafoMatrizAdy::suprimirNodo(int valor)
{
    unsigned long i{0}, j{0};
    while((i < NmaxNodos) && (ListaNodos.at(i).existe) && (ListaNodos.at(i).info != valor)){
        i++;
    }
    if(i == NmaxNodos){
        return false;
    }else{
        ListaNodos.at(i).info = 0;
        ListaNodos.at(i).existe = 0;
        ListaNodos.at(i).visitado = 0;
        ListaNodos.at(i).distancia = numeric_limits<int>::max();
        
        for(j = 0; j < NmaxNodos; j++){
            MatrizAdyaciencia.at(i).at(j).existe = false;
            MatrizAdyaciencia.at(j).at(i).existe = false;
            
            MatrizAdyaciencia.at(i).at(j).info = 0;
            MatrizAdyaciencia.at(j).at(i).info = 0;
        }
        return true;
    }
}

bool GrafoMatrizAdy::suprimirArista(int n1, int n2)
{
    unsigned long i{0}, j{0};
    while((i < NmaxNodos) && (ListaNodos.at(i).existe) && (ListaNodos.at(i).info != n1)){
        i++;
    }
    if(i == NmaxNodos){
        return false;
    }else{
        j = 0;
        while((j < NmaxNodos) && (ListaNodos.at(j).existe) && (ListaNodos.at(j).info != n2)){
            j++;
        }
        if(j == NmaxNodos){
            return false;
        }else{
            MatrizAdyaciencia.at(i).at(j).existe = 0;
            MatrizAdyaciencia.at(i).at(j).info = 0;
        }
        return true;
    }
}

void GrafoMatrizAdy::dijkstra(Nodo inicio)
{
    resetVisitados(&ListaNodos);
    resetDistancias(&ListaNodos);
    
    int indice = getIndice(inicio);
    
    ListaNodos.at(indice).distancia = 0;
    ListaNodos.at(indice).visitado = true;
    
    Nodo *aux = &ListaNodos.at(indice);
    Nodo *temporal = nullptr;
    
    int DistanciaMinima = numeric_limits<int>::max();
    
    aux->IndPadre = -1;
    bool flag = 1;
    
    while(flag){
        temporal = nullptr;
        for(auto &n : aux->Vecinos){
            if(n->visitado == 0 && getPeso(*aux, *n) < DistanciaMinima){
                temporal = n;
                temporal->distancia = getPeso(*aux, *n);
            }
        }
        if(temporal == nullptr){
            break;
        }
        temporal->visitado = true;
        temporal->IndPadre = getIndice(*aux);
        if(temporal->Vecinos.size() != 0){
            for(auto &n : temporal->Vecinos){
                if(n->distancia > temporal->distancia + getPeso(*temporal, *n)){
                    n->distancia = temporal->distancia + getPeso(*temporal, *n);
                    n->IndPadre = getIndice(*temporal);
                    aux = n;
                }
            }
        }else{
            break;
        }
    }
}

void GrafoMatrizAdy::MostrarCaminoDijkstra(Nodo destino)
{
    int indDest = getIndice(destino);
    if(indDest == -1){
        cout << "Nodo destino no encontrado en el grafo" << endl;
    }else{
        if(ListaNodos.at(indDest).distancia == numeric_limits<int>::max()){
            cout << "No hay camino desde el nodo de origen al nodo destino" << endl;
        }else{
            cout << "El camino inverso es: " << destino.info << " ";
            int aux = ListaNodos.at(indDest).IndPadre;
            while(aux != -1){
                cout << ListaNodos.at(aux).info << " ";
                aux = ListaNodos.at(aux).IndPadre;
            }
            cout << endl;
        }
    }
}

int GrafoMatrizAdy::getPeso(Nodo inicio, Nodo destino)
{
    unsigned long i{0}, j{0};
    while((i < NmaxNodos) && (ListaNodos.at(i).existe) && (ListaNodos.at(i).info != inicio.info)){
        i++;
    }
    if(i == NmaxNodos){
        return false;
    }else{
        j = 0;
        while((j < NmaxNodos) && (ListaNodos.at(j).existe) && (ListaNodos.at(j).info != destino.info)){
            j++;
        }
        if(j == NmaxNodos){
            return false;
        }else{
            if(MatrizAdyaciencia.at(i).at(j).existe){
                return MatrizAdyaciencia.at(i).at(j).info;
            }else{
                return false;
            }
        }
    }
}

int GrafoMatrizAdy::getIndice(Nodo n)
{
    int i{0};
    while( (i < NmaxNodos) && (ListaNodos.at(i).existe) && (ListaNodos.at(i).info != n.info)){
        i++;
    }
    if(i == NmaxNodos){
        return -1;
    }else{
        return i;
    }
}

void GrafoMatrizAdy::resetVisitados(array<Nodo, NmaxNodos> *LN)
{
    for(int i{0}; i < NmaxNodos; i++){
        LN->at(i).visitado = false;
    }
}

void GrafoMatrizAdy::resetDistancias(array<Nodo, NmaxNodos> *LN)
{
    for(int i{0}; i < NmaxNodos; i++){
        LN->at(i).distancia = numeric_limits<int>::max();
    }
}

int main()
{
    cout << "Ejemplo de Dijkstra...." << endl;
    GrafoMatrizAdy Grafo;
    
    cout << "El grafo esta vacio?: ";
    cout << Grafo.GrafoVacio() << endl;
    
    Nodo n1{1,0,0,0,0};
    Nodo n2{2,0,0,0,0};
    Nodo n3{3,0,0,0,0};
    Nodo n4{4,0,0,0,0};
    
    Grafo.insertarNodo(n1);
    Grafo.insertarNodo(n2);
    Grafo.insertarNodo(n3);
    Grafo.insertarNodo(n4);
    
    Grafo.crearArista(n1,n2,{2,0});
    Grafo.crearArista(n2,n4,{2,0});
    Grafo.crearArista(n1,n4,{6,0});
    Grafo.crearArista(n3,n1,{2,0});
    
    Grafo.dijkstra(n1);
    
    cout << "Desde el nodo 1 podemos ir a: " << endl;
    for(auto a : Grafo.getListaNodos()){
        if(a.distancia != numeric_limits<int>::max()){
            cout << a.info << " . Con coste total de: " << a.distancia << endl;
        }
    }
    cout << "Camino Dijkstra a n1: " << endl;
    Grafo.MostrarCaminoDijkstra(n1);
    cout << endl;
    cout << "Camino Dijkstra a n2: " << endl;
    Grafo.MostrarCaminoDijkstra(n2);
    cout << endl;
    cout << "Camino Dijkstra a n3: " << endl;
    Grafo.MostrarCaminoDijkstra(n3);
    cout << endl;
    cout << "Camino Dijkstra a n4: " << endl;
    Grafo.MostrarCaminoDijkstra(n4);
    cout << endl;
    
    Grafo.imprimirNodos();
    Grafo.imprimirMat();
    Grafo.explorar(n1);
    
    
    return 0;
}
